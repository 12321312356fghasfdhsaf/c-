// Sea_battle_bot.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
                     


                                                                ////// БОТ_1(ПРОТОТИП) //////
																
//////////////////////////////////////        СТРЕЛЯЕТ ПО СЛУЧАЙНОЙ ЯЧЕКЕ МАССИВА, ЕСЛИ НЕ ПОПАЛ, СТРЕЛЯЕТ ЗАНОВО       /////////////////////////////////////////////
///////////////////////////////////             КОГДА ПОПАДАЕТ ВКЛЮЧАЕТСЯ РЕЖИМ 2 И НАЧИНАЕТ СТРЕЛЯТЬ ПО РЯДУ          //////////////////////////////////////////////////
///////////////////////////////////////          ДОХОДИТ ДО КРАЯ ЗАПОЛНЕННОГО РЯДА, ПОНИМАЕТ ЧТО РЯД ЗАКОНЧИЛСЯ        /////////////////////////////////////////////
//////////////////////////////////////                      НАЧИНАЕТ СТРЕЛЯТЬ В ПРОТВОПОЛЖНУЮ СТРОНУ                       ///////////////////////////////////////
/////////////////////////////////////     ЕСЛИ ВИДИТ,ЧТО РЯДОМ НЕ МОЖЕТ БЫТЬ КОРОБЛЯ(ИЛИ ГРАНИЦА ПОЛЯ) - НЕ СТРЕЛЯЕТ         ///////////////////////////////////////////////////
//////////////////////////////////////               МАССИВ - ЭТО БУДУЮЩАЯ СТРОКА ИГРОВОГО ПОЛЯ " МОРСКОЙ БОЙ "         ////////////////////////////////////////////////
/////////////////////////////////////                            2-ПОМЕЧАЕМ ПОДБИТУЮ ПАЛУБУ                             //////////////////////////////////////////////


#include <iostream>
#include <windows.h>
#include <vector>
using namespace std;

int main()
{
	setlocale(LC_ALL, "rus");
	int const size = 10;
	int mass[size][size] ={
	{ 1,1,1,1,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0 },
	{ 0,0,0,0,0,0,0,0,0,0 }
                          };////еденицами помечены палубы 
	int live = 4;  // количество палуб(жизней)
	int mode = 0;
	int x = 0;
	int y = 0;
	int dim = 0;    // переменная напрвления

	vector<int>dims;
	dims.push_back(3);
	dims.push_back(2);
	dims.push_back(1);
	dims.push_back(0);

	int first_hit_x = 0; 
	int first_hit_y = 0;//переменная для сохранения первого случайного попадания

	do
	{
		if (mode == 0) // 1й режим случайный
		{
			x = rand() % size; //случайный выстрел
			y = rand() % size;

			if (mass[x][y] == 1) //если попали
			{
				mode = 1;      // переключаемся на режим анализа(режим 2)
				mass[x][y] = 2;
				first_hit_x = x;
				first_hit_y = y;
				live--;

				if (!dims.empty())  // если вектор не пуст
				{
					dim = dims[dims.size() - 1];
					dims.pop_back();
				}
				cout << " ранен " << endl;
			}
			else
			{
				mass[x][y] = 3;
				cout << " промазал ! " << endl;
			}
		}
	    else if (mode == 1)  // 2й режим анализа

		{
			bool change_dim = 0;

			if (dim == 0) // влево
			{
				if (x > 0)
				{
					x--;                //ограничение выхода за пределы влево
				}
				else
				{
					change_dim = 1;
					
				}
			}
			else if(dim==1)  //вправо
			{
				if (x < size - 1) // ограничение выхода за пределы вправо
				{
					x++;
				}
				else
				{
					change_dim = 1;
					
				}
			}
			else if (dim == 2)  //вверх
			{
				if (y>0) // ограничение выхода за пределы вправо
				{
					y--;
				}
				else
				{
					change_dim = 1;

				}
			}
			else if (dim == 3)  //вниз
			{
				if (y< size - 1) // ограничение выхода за пределы вправо
				{
					y++;
				}
				else
				{
					change_dim = 1;
				}
			}

			if(change_dim==1)
			{
				if (!dims.empty())  // если вектор не пуст
				{
					dim = dims[dims.size() - 1];
					dims.pop_back();
				}
				x = first_hit_x;
				y = first_hit_y;

				continue;

			}



			if (mass[x][y] == 1 && live>1)
			{
				mass[x][y] = 2;
				cout << " ранен " << endl;
				live--;
			}
			else if (mass[x][y] == 1 && live == 1)
			{
				mass[x][y] = 2;
				cout << " убит " << endl;
				mode = 0;    // переключаем в режим 1
				live = 0;
			}
			else
			{
				mass[x][y] = 3;

				if (!dims.empty())  // если вектор не пуст
				{
					dim = dims[dims.size() - 1];
					dims.pop_back();
				}
				x = first_hit_x;
				y = first_hit_y;



				cout << " промазал !" << endl;
			}
		}
		for (int i = 0; i < size; i++)
		{
			for (int j = 0; j < size; j++)
			{
				cout << mass[j][i] << " ";
			}
			cout << endl;
		}
		cout << endl;


	} while (live!=0);


   
}
